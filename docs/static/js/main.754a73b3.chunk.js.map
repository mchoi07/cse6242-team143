{"version":3,"sources":["component/ChartPanel/index.js","component/ControlPanel/index.js","component/ChartContainer/index.js","App.js","reportWebVitals.js","index.js"],"names":["ChartPanel","props","state","getStateFromProps","_tooltipHtml","bind","_onChange","sentimentHeight","config","chartWidth","chartMargin","brushMargin","this","_getXRange","data","minX","maxX","dataStock","label","values","map","el","y","price","dataMovement","dataSentiment","slice","xScale","d3","time","scale","domain","range","left","right","xScaleBrush","yScaleMovement","linear","_getYRange","top","bottom","yScaleSentiment","prevProps","newState","setState","length","x","arr","reduce","max","cur","Math","abs","maxAbs","Array","isArray","i","_getMaxAbs","positives","neutrals","negatives","p1","p2","p3","console","log","extent","chartHeight","brushHeight","className","width","height","margin","yScale","xAxis","tickValues","ticks","tickFormat","format","zero","yAxis","tooltipHtml","stroke","strokeColor","_getColor","colorStroke","style","orientation","onChange","Component","useStyles","makeStyles","theme","createStyles","card","padding","cardTitle","textAlign","marginBottom","cardAction","labelStock","color","colorStock","labelBlob","colorBlob","labelSmall","colorSmall","labelLarge","colorLarge","ControlPanel","classes","useState","normFactor","setNormFactor","selectedTextblob","setSelectedTextblob","selectedSmall","setSelectedSmall","selectedLarge","setSelectedLarge","source","setSource","modelSelected","textblob","small","large","handleCheckChange","event","target","name","checked","Box","alignItems","justifyContent","Card","CardContent","FormControl","component","FormLabel","FormGroup","FormControlLabel","disabled","control","Checkbox","indeterminate","RadioGroup","defaultValue","value","Radio","TextField","input","type","fullWidth","inputProps","min","step","InputLabelProps","shrink","variant","e","CardActions","Button","size","onClick","container","flexGrow","paper","spacing","palette","text","secondary","ChartContainer","initialData","chartData","stock","sentiment","setChartData","Grid","item","xs","push","Paper","TabPanel","index","other","role","hidden","id","root","backgroundColor","background","App","setValue","companies","Typography","align","AppBar","position","Tabs","newValue","company","idx","Tab","appData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","preprocessData","rawData","processed","isLarge","date","sent_score_textblob","sent_score_custom","positives_textblob","neutrals_textblob","negatives_textblob","positives_custom","neutrals_custom","negatives_custom","marketDate","split","Date","twitter","nytimes","toLowerCase","Promise","all","fetch","s","l","json","sdata","ldata","stockPrice","prevPrice","find","round","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.754a73b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Brush, d3 } from 'react-d3-components';\n//import LineChart from '../LineChart';\nimport { LineChart } from 'react-d3-components';\n\nimport './index.scss';\n\nimport config from '../../config/config.json';\n\nexport class ChartPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getStateFromProps(props);\n    this._tooltipHtml = this._tooltipHtml.bind(this);\n    this._onChange = this._onChange.bind(this);\n  }\n\n  getStateFromProps(props) {\n    const { sentimentHeight, chartWidth, chartMargin, brushMargin } = config;\n    const { minX, maxX } = this._getXRange(props.data[0]);\n    return {\n      dataStock: {\n        label: '',\n        values: props.data[0].values.map((el) => {\n          return { ...el, y: el.price };\n        }),\n      },\n      dataMovement: props.data[0],\n      dataSentiment: props.data.slice(1),\n      xScale: d3.time\n        .scale()\n        .domain([minX, maxX])\n        .range([0, chartWidth - chartMargin?.left - chartMargin?.right]),\n      xScaleBrush: d3.time\n        .scale()\n        .domain([minX, maxX])\n        .range([0, chartWidth - brushMargin?.left - brushMargin?.right]),\n      yScaleMovement: d3.scale\n        .linear()\n        .domain(this._getYRange(props.data[0]))\n        .range([sentimentHeight - chartMargin?.top - chartMargin?.bottom, 0]),\n      yScaleSentiment: d3.scale\n        .linear()\n        .domain(this._getYRange(props.data.slice(1)))\n        .range([sentimentHeight - chartMargin?.top - chartMargin?.bottom, 0]),\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      const newState = this.getStateFromProps(this.props);\n      this.setState(newState);\n    }\n  }\n\n  _getXRange(data) {\n    let minX, maxX;\n    minX = data.values?.length > 0 ? data.values[0].x : 0;\n    maxX = data.values?.length > 0 ? data.values[data.values.length - 1].x : 0;\n    return { minX, maxX };\n  }\n\n  _getMaxAbs(arr) {\n    return arr.reduce((max, cur) => Math.max(max, Math.abs(cur)), 0);\n  }\n\n  _getYRange(data) {\n    let maxAbs = 0;\n    if (Array.isArray(data)) {\n      for (let i = 0; i < data.length; i++) {\n        maxAbs = Math.max(maxAbs, this._getMaxAbs(data[i].values.map((el) => el.y)));\n      }\n    } else {\n      maxAbs = Math.max(maxAbs, this._getMaxAbs(data.values.map((el) => el.y)));\n    }\n\n    return [-maxAbs, maxAbs];\n  }\n\n  _tooltipHtml(label, data) {\n    if (label === 'stock') {\n      return <div>price: ${data.price}</div>;\n    } else {\n      return (\n        <div>\n          positives: {data.positives}\n          <br />\n          neutrals: {data.neutrals}\n          <br />\n          negatives: {data.negatives}\n        </div>\n      );\n    }\n  }\n\n  _getColor(label, p1, p2, p3) {\n    console.log(label, p1, p2, p3);\n    return 'green';\n  }\n\n  _onChange(extent) {\n    const { chartWidth, chartMargin } = config;\n    this.setState({\n      xScale: d3.time\n        .scale()\n        .domain([extent[0], extent[1]])\n        .range([0, chartWidth - chartMargin?.left - chartMargin?.right]),\n    });\n  }\n\n  render() {\n    const {\n      chartWidth,\n      chartHeight,\n      sentimentHeight,\n      chartMargin,\n      brushHeight,\n      brushMargin,\n    } = config;\n    const { minX, maxX } = this._getXRange(this.state.dataStock);\n\n    /*\n    const xScaleBrush = d3.time\n      .scale()\n      .domain([minX, maxX])\n      .range([0, chartWidth - brushMargin?.left - brushMargin?.right]); */\n\n    return (\n      <div>\n        <div className=\"sentimentChart\">\n          <div className=\"title\">Sentiment Score & Price Change</div>\n          <div className=\"leftY\">\n            <LineChart\n              data={this.state.dataMovement}\n              width={chartWidth}\n              height={sentimentHeight}\n              margin={chartMargin}\n              xScale={this.state.xScale}\n              yScale={this.state.yScaleMovement}\n              xAxis={{\n                tickValues: this.state.xScale.ticks(10),\n                tickFormat: d3.time.format('%m/%d'),\n                zero: 0,\n              }}\n              yAxis={{ label: 'price changes' }}\n              tooltipHtml={this._tooltipHtml}\n              stroke={{\n                strokeColor: this._getColor,\n                colorStroke: this._getColor,\n              }}\n              colorStroke={this._getColor}\n            />\n          </div>\n          {this.state.dataSentiment.length > 0 && (\n            <div className=\"rightY\" style={{ bottom: sentimentHeight + 3 }}>\n              <LineChart\n                data={this.state.dataSentiment}\n                width={chartWidth}\n                height={sentimentHeight}\n                margin={chartMargin}\n                xScale={this.state.xScale}\n                yScale={this.state.yScaleSentiment}\n                xAxis={{\n                  tickValues: this.state.xScale.ticks(10),\n                  tickFormat: d3.time.format(''),\n                  zero: 0,\n                }}\n                yAxis={{ orientation: 'right', label: 'sentiment score' }}\n                tooltipHtml={this._tooltipHtml}\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"brush nofloat\">\n          <div className=\"title brush\">Date Range Selector</div>\n          <Brush\n            width={chartWidth}\n            height={brushHeight}\n            margin={brushMargin}\n            xScale={this.state.xScaleBrush}\n            extent={[minX, maxX]}\n            onChange={this._onChange}\n            xAxis={{\n              tickValues: this.state.xScaleBrush.ticks(20),\n              tickFormat: d3.time.format('%m/%d'),\n            }}\n          />\n        </div>\n        <div className=\"title\">Stock Price</div>\n        <LineChart\n          data={this.state.dataStock}\n          width={chartWidth}\n          height={chartHeight}\n          margin={chartMargin}\n          xScale={this.state.xScale}\n          xAxis={{\n            tickValues: this.state.xScale.ticks(10),\n            tickFormat: d3.time.format('%m/%d'),\n          }}\n          yAxis={{ label: 'stock price' }}\n        />\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport config from '../../config/config.json';\nimport {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  TextField,\n  Button,\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  FormGroup,\n  Checkbox,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    card: {\n      width: 200,\n      padding: '8 16',\n    },\n    cardTitle: {\n      textAlign: 'center',\n      marginBottom: '10px',\n    },\n    cardAction: {\n      margin: 'auto',\n    },\n    labelStock: {\n      color: config.colorStock,\n    },\n    labelBlob: {\n      color: config.colorBlob,\n    },\n    labelSmall: {\n      color: config.colorSmall,\n    },\n    labelLarge: {\n      color: config.colorLarge,\n    },\n  })\n);\n\nexport const ControlPanel = (props) => {\n  const classes = useStyles();\n  const [normFactor, setNormFactor] = useState(1);\n  const [selectedTextblob, setSelectedTextblob] = useState(true);\n  const [selectedSmall, setSelectedSmall] = useState(true);\n  const [selectedLarge, setSelectedLarge] = useState(true);\n  const [source, setSource] = useState('twitter');\n  const modelSelected = {\n    textblob: selectedTextblob,\n    small: selectedSmall,\n    large: selectedLarge,\n  };\n\n  const handleCheckChange = (event) => {\n    modelSelected[event.target.name] = event.target.checked;\n    if (event.target.name === 'textblob') {\n      setSelectedTextblob(event.target.checked);\n    } else if (event.target.name === 'large') {\n      setSelectedLarge(event.target.checked);\n    } else {\n      setSelectedSmall(event.target.checked);\n    }\n    props.onChange({ normFactor, source, modelSelected });\n  };\n\n  const handleRadioChange = (event) => {\n    setSource(event.target.defaultValue);\n    props.onChange({ normFactor, source: event.target.defaultValue, modelSelected });\n  };\n\n  const handleButtonClick = (event) => {\n    props.onChange({ normFactor, source, modelSelected });\n  };\n\n  return (\n    <Box alignItems=\"center\" justifyContent=\"center\">\n      <Card className={classes.card}>\n        <h3 className={classes.cardTitle}>Sentiment Analysis</h3>\n        <CardContent>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Model</FormLabel>\n            <FormGroup>\n              <FormControlLabel\n                disabled\n                className={classes.labelStock}\n                control={\n                  <Checkbox\n                    style={{ color: config.colorStock }}\n                    indeterminate\n                    checked\n                    name=\"stock\"\n                  />\n                }\n                label=\"Daily Price Change\"\n              />\n              <FormControlLabel\n                className={classes.labelBlob}\n                control={\n                  <Checkbox\n                    style={{ color: config.colorBlob }}\n                    onChange={handleCheckChange}\n                    checked={selectedTextblob}\n                    name=\"textblob\"\n                  />\n                }\n                label=\"TextBlob\"\n              />\n              <FormControlLabel\n                className={classes.labelSmall}\n                control={\n                  <Checkbox\n                    style={{ color: config.colorSmall }}\n                    onChange={handleCheckChange}\n                    checked={selectedSmall}\n                    name=\"small\"\n                  />\n                }\n                label=\"Custom (small)\"\n              />\n              <FormControlLabel\n                className={classes.labelLarge}\n                control={\n                  <Checkbox\n                    style={{ color: config.colorLarge }}\n                    onChange={handleCheckChange}\n                    checked={selectedLarge}\n                    name=\"large\"\n                  />\n                }\n                label=\"Custom (large)\"\n              />\n            </FormGroup>\n          </FormControl>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Source</FormLabel>\n            <RadioGroup defaultValue=\"twitter\" name=\"sentiment-model\" onChange={handleRadioChange}>\n              <FormControlLabel value=\"twitter\" control={<Radio />} label=\"Twitter\" />\n              <FormControlLabel value=\"nytimes\" control={<Radio />} label=\"NYTimes\" />\n            </RadioGroup>\n          </FormControl>\n        </CardContent>\n      </Card>\n      <Card className={classes.card}>\n        <h3 className={classes.cardTitle}>Stock Movement</h3>\n        <CardContent>\n          <TextField\n            className={classes.input}\n            label=\"scaling adjustment\"\n            type=\"number\"\n            fullWidth={true}\n            inputProps={{ min: 1, max: 5, step: '0.1', style: { height: 5, textAlign: 'right' } }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            value={normFactor}\n            onChange={(e) => {\n              setNormFactor(+e.target.value);\n            }}\n          />\n        </CardContent>\n        <CardActions>\n          <Button\n            className={classes.cardAction}\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={handleButtonClick}\n          >\n            Calculate\n          </Button>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n","import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { ChartPanel } from '../ChartPanel';\nimport { ControlPanel } from '../ControlPanel';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    container: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  })\n);\n\nexport const ChartContainer = (props) => {\n  const classes = useStyles();\n  const initialData = [\n    { label: 'stock', values: props.chartData.stock },\n    { label: 'textblob', values: props.chartData.sentiment['twitter'].textblob },\n    { label: 'small', values: props.chartData.sentiment['twitter'].small },\n    { label: 'large', values: props.chartData.sentiment['twitter'].large },\n  ];\n  const [chartData, setChartData] = useState(initialData);\n\n  const onControlChange = (control) => {\n    const { normFactor, source, modelSelected } = control;\n    let data = [\n      {\n        label: 'stock',\n        values: props.chartData.stock.map((el) => {\n          return { ...el, y: el.y * normFactor };\n        }),\n      },\n    ];\n    if (modelSelected.textblob)\n      data.push({ label: 'textblob', values: props.chartData.sentiment[source].textblob });\n    if (modelSelected.small)\n      data.push({ label: 'small', values: props.chartData.sentiment[source].small });\n    if (modelSelected.large)\n      data.push({ label: 'large', values: props.chartData.sentiment[source].large });\n\n    setChartData(data);\n  };\n\n  return (\n    <div className={classes.container}>\n      <Grid container spacing={3}>\n        <Grid item xs={2}>\n          <ControlPanel onChange={onControlChange} />\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <ChartPanel data={chartData} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, AppBar, Tabs, Tab } from '@material-ui/core';\n\nimport { ChartContainer } from './component/ChartContainer';\n\nimport config from './config/config.json';\n\nfunction TabPanel(props) {\n  const { value, index, chartData, ...other } = props;\n\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`tabpanel-${index}`} {...other}>\n      {value === index && <ChartContainer chartData={chartData} />}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 'auto',\n    width: 1280,\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function App(props) {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const { companies } = config;\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h3\" align=\"center\">\n        Sentiment Analysis vs. Stock Price Movement\n      </Typography>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange}>\n          {companies.map((company, idx) => (\n            <Tab key={`tab-${idx}`} label={company} />\n          ))}\n        </Tabs>\n      </AppBar>\n      {companies.map((company, idx) => (\n        <TabPanel\n          key={`panel-${idx}`}\n          value={value}\n          index={idx}\n          chartData={props.appData[company]}\n        />\n      ))}\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst preprocessData = (rawData, processed = {}, isLarge = false) => {\n  rawData.map((data) => {\n    const {\n      date,\n      company,\n      source,\n      sent_score_textblob,\n      sent_score_custom,\n      positives_textblob,\n      neutrals_textblob,\n      negatives_textblob,\n      positives_custom,\n      neutrals_custom,\n      negatives_custom,\n      price,\n    } = data;\n    let marketDate = date.split('-');\n    const x = new Date(`${marketDate[2]}-${marketDate[0]}-${marketDate[1]}T20:00:00.000Z`);\n    const initCompanyData = {\n      stock: [],\n      sentiment: {\n        twitter: {\n          textblob: [],\n          small: [],\n          large: [],\n        },\n        nytimes: {\n          textblob: [],\n          small: [],\n          large: [],\n        },\n      },\n    };\n    processed[company] = processed[company] || initCompanyData;\n    if (isLarge) {\n      processed[company].sentiment[source.toLowerCase()].large.push({\n        x,\n        y: sent_score_custom,\n        source,\n        positives: positives_custom,\n        neutrals: neutrals_custom,\n        negatives: negatives_custom,\n      });\n      return;\n    }\n    if (source === 'TWITTER') {\n      processed[company].stock.push({\n        x,\n        price,\n      });\n    }\n\n    processed[company].sentiment[source.toLowerCase()].textblob.push({\n      x,\n      y: sent_score_textblob,\n      source,\n      positives: positives_textblob,\n      neutrals: neutrals_textblob,\n      negatives: negatives_textblob,\n    });\n\n    processed[company].sentiment[source.toLowerCase()].small.push({\n      x,\n      y: sent_score_custom,\n      source,\n      positives: positives_custom,\n      neutrals: neutrals_custom,\n      negatives: negatives_custom,\n    });\n  });\n\n  return processed;\n};\n\nPromise.all([fetch('data/aggregated.json'), fetch('data/aggregated_large.json')])\n  .then(([s, l]) => Promise.all([s.json(), l.json()]))\n  .then(([sdata, ldata]) => {\n    const appData = preprocessData(sdata);\n    preprocessData(ldata, appData, true);\n    for (const company in appData) {\n      const stockPrice = appData[company].stock;\n      let prevPrice = stockPrice.find((el) => el.price > 0).price;\n      prevPrice = Math.round(prevPrice * 100) / 100;\n      stockPrice.map((el) => {\n        el.price = el.price ? Math.round(el.price * 100) / 100 : Math.round(prevPrice * 100) / 100;\n        el.y = (el.price - prevPrice) / prevPrice;\n        prevPrice = el.price;\n      });\n    }\n\n    ReactDOM.render(<App appData={appData} />, document.getElementById('root'));\n  });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}