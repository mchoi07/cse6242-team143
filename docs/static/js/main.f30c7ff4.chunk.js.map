{"version":3,"sources":["component/ChartPanel/index.js","component/ControlPanel/index.js","component/ChartContainer/index.js","App.js","reportWebVitals.js","index.js"],"names":["ChartPanel","props","state","getStateFromProps","_tooltipHtml","bind","_onChange","chartHeight","config","chartWidth","chartMargin","brushMargin","this","_getXRange","data","minX","maxX","dataStock","label","values","map","el","y","price","dataMovement","dataSentiment","slice","xScale","d3","time","scale","domain","range","left","right","yScaleMovement","linear","_getYRange","top","bottom","yScaleSentiment","xScaleBrush","prevProps","newState","setState","length","x","arr","reduce","max","cur","Math","abs","maxAbs","Array","isArray","i","_getMaxAbs","positives","neutrals","negatives","extent","brushHeight","width","height","margin","xAxis","tickValues","ticks","tickFormat","format","className","onChange","yScale","zero","tooltipHtml","yAxis","orientation","Component","useStyles","makeStyles","theme","createStyles","card","padding","cardTitle","textAlign","cardAction","ControlPanel","classes","useState","normFactor","setNormFactor","selectedTextblob","setSelectedTextblob","selectedSmall","setSelectedSmall","selectedLarge","setSelectedLarge","source","setSource","modelSelected","textblob","small","large","handleCheckChange","event","target","name","checked","Box","alignItems","justifyContent","Card","CardContent","TextField","input","type","fullWidth","inputProps","min","step","style","InputLabelProps","shrink","variant","value","e","CardActions","Button","size","onClick","FormControl","component","FormLabel","RadioGroup","defaultValue","FormControlLabel","control","Radio","FormGroup","Checkbox","container","flexGrow","paper","spacing","color","palette","text","secondary","ChartContainer","initialData","chartData","stock","sentiment","setChartData","Grid","item","xs","push","Paper","TabPanel","index","other","role","hidden","id","root","backgroundColor","background","App","setValue","companies","Typography","align","AppBar","position","Tabs","newValue","company","idx","Tab","appData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","preprocessData","rawData","processed","isLarge","date","sent_score_textblob","sent_score_custom","positives_textblob","neutrals_textblob","negatives_textblob","positives_custom","neutrals_custom","negatives_custom","marketDate","split","Date","twitter","nytimes","toLowerCase","Promise","all","fetch","s","l","json","sdata","ldata","stockPrice","prevPrice","find","round","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f30c7ff4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Brush, d3 } from 'react-d3-components';\n//import LineChart from '../LineChart';\nimport { LineChart } from 'react-d3-components';\n\nimport './index.scss';\n\nimport config from '../../config/config.json';\n\nexport class ChartPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getStateFromProps(props);\n    this._tooltipHtml = this._tooltipHtml.bind(this);\n    this._onChange = this._onChange.bind(this);\n  }\n\n  getStateFromProps(props) {\n    const { chartHeight, chartWidth, chartMargin, brushMargin } = config;\n    const { minX, maxX } = this._getXRange(props.data[0]);\n    return {\n      dataStock: {\n        label: '',\n        values: props.data[0].values.map((el) => {\n          return { ...el, y: el.price };\n        }),\n      },\n      dataMovement: props.data[0],\n      dataSentiment: props.data.slice(1),\n      xScale: d3.time\n        .scale()\n        .domain([minX, maxX])\n        .range([0, chartWidth - chartMargin?.left - chartMargin?.right]),\n      yScaleMovement: d3.scale\n        .linear()\n        .domain(this._getYRange(props.data[0]))\n        .range([0, chartHeight - chartMargin?.top - chartMargin?.bottom]),\n      yScaleSentiment: d3.scale\n        .linear()\n        .domain(this._getYRange(props.data.slice(1)))\n        .range([0, chartHeight - chartMargin?.top - chartMargin?.bottom]),\n      xScaleBrush: d3.time\n        .scale()\n        .domain([minX, maxX])\n        .range([0, chartWidth - brushMargin?.left - brushMargin?.right]),\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      const newState = this.getStateFromProps(this.props);\n      this.setState(newState);\n    }\n  }\n\n  _getXRange(data) {\n    let minX, maxX;\n    minX = data.values?.length > 0 ? data.values[0].x : 0;\n    maxX = data.values?.length > 0 ? data.values[data.values.length - 1].x : 0;\n    return { minX, maxX };\n  }\n\n  _getMaxAbs(arr) {\n    return arr.reduce((max, cur) => Math.max(max, Math.abs(cur)), 0);\n  }\n\n  _getYRange(data) {\n    let maxAbs = 0;\n    if (Array.isArray(data)) {\n      for (let i = 0; i < data.length; i++) {\n        maxAbs = Math.max(maxAbs, this._getMaxAbs(data[i].values.map((el) => el.y)));\n      }\n    } else {\n      maxAbs = Math.max(maxAbs, this._getMaxAbs(data.values.map((el) => el.y)));\n    }\n\n    return [-maxAbs, maxAbs];\n  }\n\n  _tooltipHtml(label, data) {\n    if (label === 'stock') {\n      return <div>price: ${data.price}</div>;\n    } else {\n      return (\n        <div>\n          positives: {data.positives}\n          <br />\n          neutrals: {data.neutrals}\n          <br />\n          negatives: {data.negatives}\n        </div>\n      );\n    }\n  }\n\n  _onChange(extent) {\n    const { chartWidth, chartMargin } = config;\n    this.setState({\n      xScale: d3.time\n        .scale()\n        .domain([extent[0], extent[1]])\n        .range([0, chartWidth - chartMargin?.left - chartMargin?.right]),\n    });\n  }\n\n  render() {\n    const { chartWidth, chartHeight, chartMargin, brushHeight, brushMargin } = config;\n    const { minX, maxX } = this._getXRange(this.state.dataStock);\n\n    /*\n    const xScaleBrush = d3.time\n      .scale()\n      .domain([minX, maxX])\n      .range([0, chartWidth - brushMargin?.left - brushMargin?.right]); */\n\n    return (\n      <div>\n        <LineChart\n          data={this.state.dataStock}\n          width={chartWidth}\n          height={chartHeight}\n          margin={chartMargin}\n          xScale={this.state.xScale}\n          xAxis={{\n            tickValues: this.state.xScale.ticks(10),\n            tickFormat: d3.time.format('%m/%d'),\n          }}\n        />\n        <div className=\"brush nofloat\">\n          <Brush\n            width={chartWidth}\n            height={brushHeight}\n            margin={brushMargin}\n            xScale={this.state.xScaleBrush}\n            extent={[minX, maxX]}\n            onChange={this._onChange}\n            xAxis={{\n              tickValues: this.state.xScaleBrush.ticks(20),\n              tickFormat: d3.time.format('%m/%d'),\n            }}\n          />\n        </div>\n        <div className=\"leftY\">\n          <LineChart\n            data={this.state.dataMovement}\n            width={chartWidth}\n            height={chartHeight}\n            margin={chartMargin}\n            xScale={this.state.xScale}\n            yScale={this.state.yScaleMovement}\n            xAxis={{\n              tickValues: this.state.xScale.ticks(10),\n              tickFormat: d3.time.format('%m/%d'),\n              zero: 0,\n            }}\n            tooltipHtml={this._tooltipHtml}\n          />\n        </div>\n        {this.state.dataSentiment.length > 0 && (\n          <div className=\"rightY\">\n            <LineChart\n              data={this.state.dataSentiment}\n              width={chartWidth}\n              height={chartHeight}\n              margin={chartMargin}\n              xScale={this.state.xScale}\n              yScale={this.state.yScaleSentiment}\n              xAxis={{\n                tickValues: this.state.xScale.ticks(10),\n                tickFormat: d3.time.format(''),\n                zero: 0,\n              }}\n              yAxis={{ orientation: 'right' }}\n              tooltipHtml={this._tooltipHtml}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  TextField,\n  Button,\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  FormGroup,\n  Checkbox,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    card: {\n      width: 200,\n      padding: '8 16',\n    },\n    cardTitle: {\n      textAlign: 'center',\n    },\n    cardAction: {\n      textAlign: 'center',\n    },\n  })\n);\n\nexport const ControlPanel = (props) => {\n  const classes = useStyles();\n  const [normFactor, setNormFactor] = useState(1);\n  const [selectedTextblob, setSelectedTextblob] = useState(true);\n  const [selectedSmall, setSelectedSmall] = useState(true);\n  const [selectedLarge, setSelectedLarge] = useState(true);\n  const [source, setSource] = useState('twitter');\n  const modelSelected = {\n    textblob: selectedTextblob,\n    small: selectedSmall,\n    large: selectedLarge,\n  };\n\n  const handleCheckChange = (event) => {\n    modelSelected[event.target.name] = event.target.checked;\n    if (event.target.name === 'textblob') {\n      setSelectedTextblob(event.target.checked);\n    } else if (event.target.name === 'large') {\n      setSelectedLarge(event.target.checked);\n    } else {\n      setSelectedSmall(event.target.checked);\n    }\n    props.onChange({ normFactor, source, modelSelected });\n  };\n\n  const handleRadioChange = (event) => {\n    setSource(event.target.defaultValue);\n    props.onChange({ normFactor, source: event.target.defaultValue, modelSelected });\n  };\n\n  const handleButtonClick = (event) => {\n    props.onChange({ normFactor, source, modelSelected });\n  };\n\n  return (\n    <Box alignItems=\"center\" justifyContent=\"center\">\n      <Card className={classes.card}>\n        <h3 className={classes.cardTitle}>Stock Movement</h3>\n        <CardContent>\n          <TextField\n            className={classes.input}\n            label=\"scaling adjustment\"\n            type=\"number\"\n            fullWidth={true}\n            inputProps={{ min: 1, max: 5, step: '0.1', style: { height: 5, textAlign: 'right' } }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            value={normFactor}\n            onChange={(e) => {\n              setNormFactor(+e.target.value);\n            }}\n          />\n        </CardContent>\n        <CardActions className={classes.cardAction}>\n          <Button size=\"small\" variant=\"outlined\" onClick={handleButtonClick}>\n            Apply\n          </Button>\n        </CardActions>\n      </Card>\n      <Card className={classes.card}>\n        <h3 className={classes.cardTitle}>Sentiment Analysis</h3>\n        <CardContent>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Source</FormLabel>\n            <RadioGroup defaultValue=\"twitter\" name=\"sentiment-model\" onChange={handleRadioChange}>\n              <FormControlLabel value=\"twitter\" control={<Radio />} label=\"Twitter\" />\n              <FormControlLabel value=\"nytimes\" control={<Radio />} label=\"NYTimes\" />\n            </RadioGroup>\n          </FormControl>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Model</FormLabel>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    onChange={handleCheckChange}\n                    checked={selectedTextblob}\n                    name=\"textblob\"\n                  />\n                }\n                label=\"TextBlob\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox onChange={handleCheckChange} checked={selectedSmall} name=\"small\" />\n                }\n                label=\"Custom (small)\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox onChange={handleCheckChange} checked={selectedLarge} name=\"large\" />\n                }\n                label=\"Custom (large)\"\n              />\n            </FormGroup>\n          </FormControl>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n","import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { ChartPanel } from '../ChartPanel';\nimport { ControlPanel } from '../ControlPanel';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    container: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  })\n);\n\nexport const ChartContainer = (props) => {\n  const classes = useStyles();\n  const initialData = [\n    { label: 'stock', values: props.chartData.stock },\n    { label: 'textblob', values: props.chartData.sentiment['twitter'].textblob },\n    { label: 'small', values: props.chartData.sentiment['twitter'].small },\n    { label: 'large', values: props.chartData.sentiment['twitter'].large },\n  ];\n  const [chartData, setChartData] = useState(initialData);\n\n  const onControlChange = (control) => {\n    const { normFactor, source, modelSelected } = control;\n    let data = [\n      {\n        label: 'stock',\n        values: props.chartData.stock.map((el) => {\n          return { ...el, y: el.y * normFactor };\n        }),\n      },\n    ];\n    if (modelSelected.textblob)\n      data.push({ label: 'textblob', values: props.chartData.sentiment[source].textblob });\n    if (modelSelected.small)\n      data.push({ label: 'small', values: props.chartData.sentiment[source].small });\n    if (modelSelected.large)\n      data.push({ label: 'large', values: props.chartData.sentiment[source].large });\n\n    setChartData(data);\n  };\n\n  return (\n    <div className={classes.container}>\n      <Grid container spacing={3}>\n        <Grid item xs={2}>\n          <ControlPanel onChange={onControlChange} />\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <ChartPanel data={chartData} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, AppBar, Tabs, Tab } from '@material-ui/core';\n\nimport { ChartContainer } from './component/ChartContainer';\n\nimport config from './config/config.json';\n\nfunction TabPanel(props) {\n  const { value, index, chartData, ...other } = props;\n\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`tabpanel-${index}`} {...other}>\n      {value === index && <ChartContainer chartData={chartData} />}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 'auto',\n    width: 1280,\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function App(props) {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const { companies } = config;\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h2\" align=\"center\">\n        Sentiment Analysis for Stockmarket\n      </Typography>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange}>\n          {companies.map((company, idx) => (\n            <Tab key={`tab-${idx}`} label={company} />\n          ))}\n        </Tabs>\n      </AppBar>\n      {companies.map((company, idx) => (\n        <TabPanel\n          key={`panel-${idx}`}\n          value={value}\n          index={idx}\n          chartData={props.appData[company]}\n        />\n      ))}\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst preprocessData = (rawData, processed = {}, isLarge = false) => {\n  rawData.map((data) => {\n    const {\n      date,\n      company,\n      source,\n      sent_score_textblob,\n      sent_score_custom,\n      positives_textblob,\n      neutrals_textblob,\n      negatives_textblob,\n      positives_custom,\n      neutrals_custom,\n      negatives_custom,\n      price,\n    } = data;\n    let marketDate = date.split('-');\n    const x = new Date(`${marketDate[2]}-${marketDate[0]}-${marketDate[1]}T20:00:00.000Z`);\n    const initCompanyData = {\n      stock: [],\n      sentiment: {\n        twitter: {\n          textblob: [],\n          small: [],\n          large: [],\n        },\n        nytimes: {\n          textblob: [],\n          small: [],\n          large: [],\n        },\n      },\n    };\n    processed[company] = processed[company] || initCompanyData;\n    if (isLarge) {\n      processed[company].sentiment[source.toLowerCase()].large.push({\n        x,\n        y: sent_score_custom,\n        source,\n        positives: positives_custom,\n        neutrals: neutrals_custom,\n        negatives: negatives_custom,\n      });\n      return;\n    }\n    if (source === 'TWITTER') {\n      processed[company].stock.push({\n        x,\n        price,\n      });\n    }\n\n    processed[company].sentiment[source.toLowerCase()].textblob.push({\n      x,\n      y: sent_score_textblob,\n      source,\n      positives: positives_textblob,\n      neutrals: neutrals_textblob,\n      negatives: negatives_textblob,\n    });\n\n    processed[company].sentiment[source.toLowerCase()].small.push({\n      x,\n      y: sent_score_custom,\n      source,\n      positives: positives_custom,\n      neutrals: neutrals_custom,\n      negatives: negatives_custom,\n    });\n  });\n\n  return processed;\n};\n\nPromise.all([fetch('data/aggregated.json'), fetch('data/aggregated_large.json')])\n  .then(([s, l]) => Promise.all([s.json(), l.json()]))\n  .then(([sdata, ldata]) => {\n    const appData = preprocessData(sdata);\n    preprocessData(ldata, appData, true);\n    for (const company in appData) {\n      const stockPrice = appData[company].stock;\n      let prevPrice = stockPrice.find((el) => el.price > 0).price;\n      prevPrice = Math.round(prevPrice * 100) / 100;\n      stockPrice.map((el) => {\n        el.price = el.price ? Math.round(el.price * 100) / 100 : Math.round(prevPrice * 100) / 100;\n        el.y = (el.price - prevPrice) / prevPrice;\n        prevPrice = el.price;\n      });\n    }\n\n    ReactDOM.render(<App appData={appData} />, document.getElementById('root'));\n  });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}